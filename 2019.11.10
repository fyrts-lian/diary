今天只是把上周的pta做完了，没做额外的劳动，索性做一份总结得了：
1.关于冒泡排序和选择排序：
  个人理解：冒泡排序是“相邻两个元素的比较”，一次冒泡排序就是一次相邻元素比较；
            选择排序是“当前元素与最大/最小元素的比较”，一次选择排序需要遍历一遍当前元素之后的所有元素；
2.当数组作为形参的时候，视为一个指针，该指针指向对应主函数里传入的数组；
3.10进制转化16进制，用字符数组表示16进制得出的结果；由数字转换成A~F，可以利用ascii码表来实现对应的转化；
4.简单计算器的实现：
  模拟简单运算器的工作。假设计算器只能进行加减乘除运算，运算数和结果都是整数，四种运算符的优先级相同，按从左到右的顺序计算。

  输入格式:
  输入在一行中给出一个四则运算算式，没有空格，且至少有一个操作数。遇等号”=”说明输入结束。

  输出格式:
  在一行中输出算式的运算结果，或者如果除法分母为0或有非法运算符，则输出错误信息“ERROR”。
  ————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#include<iostream>
using namespace std;
int main()
{
    int a,b;
    char c;
    cin>>a;
    c=getchar();
    do
    {
        if (c=='=') break;

        cin>>b;

        switch (c)
         {
            case '+':
                a+=b;break;
            case'-':
                a-=b;break;
            case'*':
                a*=b;break;
            case'/':
                if (b!=0)
                {
                    a/=b;
                    break;
                }
            default:
                cout<<"ERROR";
                exit(0);
                break;
        }
        c=getchar();
    }while(c!='=');

    cout<<a;
    
    return 0;
}
其中的关键在于在计算的哪些步骤实现一次循环，找好循环的位置，就好解决了。
————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
5.由4.以及一些做过的题目得出的经验：一些看似需要循环的问题，其开头的操作或者末尾的操作也许并不需要加入到循环当中，这样
也许会有助于使循环的过程更加清晰。
6.实现多组数据输入的迷之技巧：while(scanf("%d",&a)!=EOF)  eof：文件结束符；
7.关于\0，\n，0，eof的联系与介绍：
  \0是字符串结束标志，是一个字符，往往存在于字符串末尾，表示字符串结束；
  \n是换行符，即也是一个字符，常常是某些读取函数的结束标识符，如scanf,getchar(),gets()；
  eof，end of file的简写；是一个宏定义，其值为常数-1，一般用于文件的读取末尾。
8.pta明明已经改完错，结果还是有不少错误，排名老难看了。最近的态度真的不行，亟需改正。
9.临时想起来：
    宏：
    #define <宏名> <宏体>           【注意：不加分号】
    其中， <宏名>是一个标识符，<宏体>是被替换用的字符串。
    例如：
    #define PI 3.14
    定义改代码后，把程序中全部的标识符PI换成3.14。
    
    例子：
    #define F(a,b) a+b
    如果在程序中出现如下语句,
    int r,a=1,b=1;
    r=F(a,b);
    则被替换为：
    r=a+b;
10.敲代码出现格式问题已经很多次了，下次能不能严谨点啊
11.vs里f11：下一语句（单步过程），能够进入函数体；
       f10：下一步，不能进入函数体；
       f5:调试；
       ctrl+f5：直接运行；
