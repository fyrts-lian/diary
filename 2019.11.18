今天又又又又又学新课了：
总结总结（反正明天上午没课，诶嘿嘿）：
1.void指针：
  void指针声明形式：void*a;值得注意的是：void a这种声明是错误的（存疑，我没试），即使正确，也没有实际意义。
  可以将其理解为：不指向确定的类型的指针（毕竟是void嘛）。
  void指针需要经过转换为指定的类型，才可以对其他指针变量进行赋值：
    例：void *a;
        int* b；
        b=（int *）a；
  反之，任何指针变量都可以直接给void指针变量直接赋值：
    例：void *p1;
        int *p2;
        p1 = p2;
2.补充一个之前的疑问：
  例如： char *p="abc";是怎么个原理？
  解答：该语句可以理解为：定义一个字符型指针变量p，其指向字符串“abc”的首地址；
3.引用：
  引用是啥？
    例:int a;
       int &b=a;
     这称之为：声明了b对a的引用，b是a的别名；
     注意：此处的&不是取址符，而是“引用声明符”；
     这样，对于变量a，也可以用b来“称呼它”（可以在某种程度上理解为给变量起外号233）
  使用说明：
    引用的声明和初始化必须同时进行；
    一个引用只能作为一个变量的引用，不可以同时作为多个变量的引用；
    数组不能建立引用，无论是整个数组还是数组的某个元素；
    指针不能指向引用（以上文为例，指针可以指向a，不可以指向b）；但是可以对引用取址（int*p，p=&b）；
    不允许多重引用；
  碎碎念：
    老实说，我还没有感受到引用有什么香的XD；
4.结构体：
  声明结构体：
    struct 结构体名称
      {
        成员表（格式：成员类型 成员名称）
      }
    例：struct student
      {
        string name;
        int point;
      }；          !!!∑(ﾟДﾟノ)ノ注意，分号不能忽略。
    注意：c++中，可以将struct去掉，c不行；（我觉得没啥用）
  定义结构体：
    结构体名称 变量名；
      例: student student1;
        (其实也可以在声明的}后面跟上要定义的变量名）；
  初始化：
    就像初始化字符型数组一样：
      例：student1={“ys”，233}；
  引用结构体变量：
    引用的结构：变量名.成员名；
      例： student1.point;
  结构体数组：
    定义一个数组，数组的每个元素都是一个结构体；（有点二维数组的感觉？）
      例：student a[2]={"y",233,"s",233};
  指向结构体变量的指针：
    没啥好总结的，（*p）能代替变量名就完事了。
    特别指出，学到了一个运算符“—>”，p—>point等价于（*p）.point，等价于student1.point（前提是p=&student1）;换而言之，表示一
    个结构体的成员，有以上三种表达方式；
      
    
