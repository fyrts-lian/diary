突然想到一个很恐怖的事情：
一直屯着最近程序设计的知识没复习，现在想过来，已经可以写很长一段的日记了o(ﾟДﾟ)っ！（上次写专业课的笔记还是在4天前233）
————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
链表：
  ★链表的理解：
     可以将链表形象地比喻成一个一个的箱子和藏宝图：打开一个箱子，箱子里面有宝藏（结构体的各个成员），同时含有指向下一个藏宝箱的地图（指针），
  	 以此类推，直到最后一个藏宝箱，不再有指向下一个藏宝箱的地图了（null（即空地址））；
                                                                  ps：null 相当于0，这个在iostream文件中已经定义过；
  	 作为对比，数组：
  	 数组类似于：打开一个箱子，箱子里面有宝藏，同时箱子旁边就是下一个箱子，以此类推，直到最后一个宝箱……233
     ↓
     显然就可以得到一个结论：【链表中各元素在内存中的存储单元是可以不连续的】
  ★链表的建立：
	   直接拿课本的例子好了：
		    Struct student 
        {
        int num;
        float score;
        student *next;
        };
     num和score就相当于箱子（结构体student）里面的宝藏（成员），next就相当于指向下一个藏宝箱（下一个student类型的结构体）的地图；
     【注】此处阐明几个概念：链表由【结构体变量和指向结构体变量的指针】构成；
                            链表中的每一个元素称为【结点】（宝箱），每一个结点包括两部分：用户实际需要的数据（宝藏）和下一个结点的地址（地图）
                            链表需要有一个【头指针】变量，来存放首个结构体的起始地址；
                            
  ★链表的实际建立与输出：
      再拿课本的示范代码作为例子（偷懒真的爽）：
            #include<iostream>
            using namespace std;
           struct student 
          {
           int num;
           float score;
           student *next;      //指针，也就是我们比喻的“藏宝图”
          };
          int main()
          {
            student a,b,c,*head,*p;     //head也就是定义的【头指针，用来存放第一个结构体的起始地址】，p是“藏宝图”；
            a.num=31001;a.score=89.5;
            b.num=31003;b.score=90;
            c.num=31007;c.score=85;
            head=&a;
            a.next=&b;
            b.next=&c;
            c.next=NULL;
            p=head;
            do
            {
              cout<<p->num<<" "<<p->score<<endl;
              p=p->next;       //让p指向下一个结构体的起始地址；
            }
			      while(p!=NULL);
            return 0;
          }
     由该例子引申出来两个新的定义：所有【结点】都是在程序上定义的，不是临时开辟的，也不能用完后释放，这种链表称作【静态链表】；
                                  各【结点】可以随时插入和删除，这些结点并没有变量名，只能先找到上一个结点，才能根据它提供的下一结点的地址
                                  找到下一个结点；这样的链表叫做【动态链表】；
————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
结构体类型数据作为函数参数：
    1.用【结构体变量名】作为参数：
        例如：
            （假设在主函数里已经定义了student类的数据stu1，且已经完成了初始化）
            函数声明阶段：void print（student）；//函数声明，形参为student类型的结构体数据；
            函数引用阶段：print（stu1）；
            函数定义阶段：void print（student stu1）
                      {
                        cout<<stu.num<<" "<<stu.name<<endl;
                      }
    2.用【指向结构体变量的指针】作实参：
        例如：
            （假设在主函数里已经定义了student类的数据stu1，且已经完成了初始化）
            函数声明阶段：void print（student *）；//函数声明，形参为指向student类型数据的指针变量；
            函数引用阶段：student *p=&stu1；
                      print（p）；
            函数定义阶段：void print（student *p）
                      {
                        cout<<p->num<<" "<<p->name<<endl;
                      }  
    3.用【结构体变量的引用】作参数：
        例如：
            （假设在主函数里已经定义了student类的数据stu1，且已经完成了初始化）
            函数声明阶段：void print（student &）;
            函数引用阶段：print（stu1）；
            函数定义阶段：void print（student &stud） //给stu起个“外号”叫stud
                       {
                        cout<<stud.num<<" "<<stud.name<<endl;
                       }
     
     【实验证明三者的运算结果相同】→可是三种方式有什么区别吗？
          程序1虽然简单易懂，但是调用函数的时候需要为形参开辟内存，时间和空间的开销比较大，【效率不高】；
          程序2实参和形参都是指针；在调用函数的时候，形参只占用了4个字节；时间和空间的开销比较小，效率较高，但是【不直观】；
          程序3实参是结构体变量，形参是它的引用；传递的是stu1的地址，【直观且高效】；
——————————————————END—————————————————————————————————END——————————————————————————————————END—————————————————————————
     题外话，偶然看见一个对指针的解释，挺有意思的：
        指针就是种子，片儿都在内存里，为什么大家传种子不传片儿？因为效率高啊。
        
                                                                                              不扯犊子了，困死我了，睡觉233
